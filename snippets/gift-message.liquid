{% comment %}
  Gift Message Snippet
  This snippet renders a gift message input field that is only visible when "Bespoke Gift Wrap" is selected as "Yes"
{% endcomment %}

<div 
  class="gift-message-block spacing-style"
  style="{% render 'spacing-style', settings: block.settings %}"
  data-gift-message-block
  {{ block.shopify_attributes }}
>
  <div class="gift-message__container">
    <label for="gift-message-{{ block.id }}" class="gift-message__label">
      {{ block.settings.heading | default: 'Gift message (optional)' }}
    </label>
    
    <div class="gift-message__input-wrapper">
      <textarea
        id="gift-message-{{ block.id }}"
        name="gift_message"
        class="gift-message__input"
        placeholder="{{ block.settings.placeholder | default: 'Enter your gift message here...' }}"
        maxlength="{{ block.settings.max_length | default: 70 }}"
        rows="4"
        data-gift-message-input
      ></textarea>
      
      <div class="gift-message__counter">
        <span class="gift-message__char-count" data-char-count>0</span>/{{ block.settings.max_length | default: 70 }} characters
      </div>
    </div>
    
    {% if block.settings.help_text != blank %}
      <p class="gift-message__help-text">
        {{ block.settings.help_text }}
      </p>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const giftMessageBlock = document.querySelector('[data-gift-message-block]');
    if (!giftMessageBlock) {
      return;
    }
    
    const textarea = giftMessageBlock.querySelector('[data-gift-message-input]');
    const charCount = giftMessageBlock.querySelector('[data-char-count]');
    const maxLength = parseInt(textarea.getAttribute('maxlength'));
    
    // Character counter functionality
    function updateCharCount() {
      const currentLength = textarea.value.length;
      charCount.textContent = currentLength;
      
      if (currentLength > maxLength * 0.9) {
        charCount.style.color = '#b20000';
      } else {
        charCount.style.color = '';
      }
    }
    
    textarea.addEventListener('input', updateCharCount);
    
    // Always show the gift message block
    giftMessageBlock.style.display = 'block';
  });
</script>

{% stylesheet %}
  .gift-message-block {
    display: block;
    width: 100%;
  }
  
  .gift-message__container {
    display: flex;
    flex-direction: column;
    gap: var(--gap-sm);
  }
  
  .gift-message__label {
    font-weight: 600;
    color: var(--color-foreground);
    margin-bottom: var(--margin-xs);
  }
  
  .gift-message__input-wrapper {
    position: relative;
  }
  
  .gift-message__input {
    width: 100%;
    min-height: 100px;
    padding: var(--padding-lg);
    border: 1px solid var(--color-input-border);
    border-radius: var(--style-border-radius-inputs);
    background-color: var(--color-input-background);
    color: var(--color-foreground);
    font-family: var(--font-body--family);
    font-size: var(--font-size--sm);
    line-height: 1.5;
    resize: vertical;
    transition: border-color var(--animation-speed) ease, box-shadow var(--animation-speed) ease;
  }
  
  .gift-message__input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgba(var(--color-primary-rgb), 0.1);
  }
  
  .gift-message__input::placeholder {
    color: var(--color-input-text);
    opacity: 0.7;
  }
  
  .gift-message__counter {
    position: absolute;
    bottom: var(--padding-xs);
    right: var(--padding-xs);
    font-size: var(--font-size--xs);
    color: var(--color-foreground);
    opacity: 0.7;
    pointer-events: none;
  }
  
  .gift-message__help-text {
    font-size: var(--font-size--xs);
    color: var(--color-foreground);
    opacity: 0.7;
    margin: 0;
  }
{% endstylesheet %}
